{"version":3,"sources":["types.ts","constants.ts","state/reducer.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","PatientDetailsPage/EntryComponents.tsx","validationHelpers.tsx","AddPatientEntry/HospitalEntryForm.tsx","AddPatientEntry/OccupationalHealthcareForm.tsx","AddPatientEntry/HealthCheckForm.tsx","AddPatientEntry/index.tsx","PatientDetailsPage/index.tsx","App.tsx","index.tsx"],"names":["HealthCheckRating","EntryTypes","Gender","apiBaseUrl","updatePatient","payload","type","initialState","patients","diagnosisCodes","StateContext","createContext","useStateValue","useContext","SelectField","name","label","options","id","uuidv4","Form","Field","htmlFor","as","className","map","option","key","value","TextField","field","placeholder","style","color","DiagnosisSelection","diagnoses","setFieldValue","setFieldTouched","stateOptions","diagnosis","code","text","Dropdown","fluid","multiple","search","selection","onChange","_event","data","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","dispatch","React","useState","setModalOpen","setError","closeModal","undefined","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","patient","Cell","to","a","async","axios","post","newPatient","console","response","Hospital","entry","discharge","date","criteria","OccupationalHealthCare","employerName","sickLeave","startDate","endDate","HealthCheck","Label","Icon","Healthy","LowRisk","HighRisk","CriticalRisk","ratingToColor","healthCheckRating","ratingToDescription","isValidDateString","dateString","test","HospitalEntryForm","description","specialist","dischargeDate","dischargeCriteria","formValues","OccupationealHealthcareForm","sickLeaveStartDate","sickLeaveEndDate","OccupationalHealthcare","HealthCheckForm","formDefaults","Number","AddPatientEntry","currentEntryType","setCurrentEntryType","Select","e","Divider","PatientDetailsPage","useParams","currentPatient","useEffect","fetchTimestamp","get","patientDetails","Math","floor","Date","now","fetchPatientDetails","getEntryTypeIconName","EntryDetails","Error","JSON","stringify","assertNever","CodeList","listOfCodes","matchingCode","find","random","getGenderIconName","tempPatient","entries","push","App","patientListFromApi","fetchPatientList","diagnosisListFromApi","fetchDiagnosisList","Link","primary","hidden","path","render","ReactDOM","reducer","children","useReducer","state","Provider","action","reduce","memo","document","getElementById"],"mappings":"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","file":"static/js/main.10af6459.chunk.js","sourcesContent":["export interface Diagnosis {\r\n  code: string;\r\n  name: string;\r\n  latin?: string;\r\n}\r\n\r\ninterface Duration {\r\n  startDate: string;\r\n  endDate: string;\r\n}\r\n\r\ninterface Discharge {\r\n  date: string;\r\n  criteria: string;\r\n}\r\n\r\nexport enum HealthCheckRating {\r\n  'Healthy' = 0,\r\n  'LowRisk' = 1,\r\n  'HighRisk' = 2,\r\n  'CriticalRisk' = 3\r\n}\r\n\r\ninterface BaseEntry {\r\n  id: string;\r\n  description: string;\r\n  date: string;\r\n  specialist: string;\r\n  diagnosisCodes?: Array<Diagnosis['code']>;\r\n}\r\n\r\nexport enum EntryTypes {\r\n  Hospital = 'Hospital',\r\n  OccupationalHealthcare = 'OccupationalHealthcare',\r\n  HealthCheck = 'HealthCheck'\r\n}\r\nexport interface HospitalEntry extends BaseEntry {\r\n  type: EntryTypes.Hospital;\r\n  discharge: Discharge;\r\n}\r\nexport interface OccupationalHealthCareEntry extends BaseEntry {\r\n  type: EntryTypes.OccupationalHealthcare;\r\n  employerName: string;\r\n  sickLeave?: Duration;\r\n}\r\nexport interface HealthCheckEntry extends BaseEntry {\r\n  type: EntryTypes.HealthCheck;\r\n  healthCheckRating: HealthCheckRating;\r\n}\r\n\r\nexport type Entry = | HospitalEntry | OccupationalHealthCareEntry | HealthCheckEntry;\r\n\r\nexport enum Gender {\r\n  Male = \"male\",\r\n  Female = \"female\",\r\n  Other = \"other\"\r\n}\r\n\r\nexport interface Patient {\r\n  id: string;\r\n  name: string;\r\n  occupation: string;\r\n  gender: Gender;\r\n  ssn?: string;\r\n  dateOfBirth?: string;\r\n  entries?: Entry[];\r\n\r\n  /** Unix timestamp (seconds since January 1, 1970) representing when the data was fully fetched\r\n   * \r\n   * Exists only to satisfy the requirement 9.17 \"Do not fetch the information if it already is in the app state\".\r\n   * This seems to be the least \"hackiest\" way to do it without creating a complex state or using a full blown caching solution\r\n   * \r\n   * TODO: Refactor this horrible hack if a better solution is available\r\n   * */\r\n  fetchTimestamp?: number;\r\n}\r\n","export const apiBaseUrl = 'http://localhost:3001/api';\r\n","import { State } from \"./state\";\r\nimport { Patient } from \"../types\";\r\nimport { Diagnosis } from './../types';\r\n\r\nexport type Action =\r\n  | {\r\n    type: \"SET_PATIENT_LIST\";\r\n    payload: Patient[];\r\n  }\r\n  | {\r\n    type: \"ADD_PATIENT\";\r\n    payload: Patient;\r\n  }\r\n  | {\r\n    type: \"UPDATE_PATIENT\";\r\n    payload: Patient;\r\n  }\r\n  | {\r\n    type: \"SET_DIAGNOSIS_LIST\";\r\n    payload: Diagnosis[];\r\n  };\r\n\r\nexport const setPatientList = (payload: Patient[]): Action => {\r\n  return {\r\n    type: 'SET_PATIENT_LIST',\r\n    payload: payload\r\n  };\r\n};\r\n\r\nexport const addPatient = (payload: Patient): Action => {\r\n  return {\r\n    type: 'ADD_PATIENT',\r\n    payload: payload\r\n  };\r\n};\r\n\r\nexport const updatePatient = (payload: Patient): Action => {\r\n  return {\r\n    type: 'UPDATE_PATIENT',\r\n    payload: payload\r\n  };\r\n};\r\n\r\nexport const setDiagnosisList = (payload: Diagnosis[]): Action => {\r\n  return {\r\n    type: \"SET_DIAGNOSIS_LIST\",\r\n    payload: payload\r\n  };\r\n};\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case \"SET_PATIENT_LIST\":\r\n      return {\r\n        ...state,\r\n        patients: {\r\n          ...action.payload.reduce(\r\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\r\n            {}\r\n          ),\r\n          ...state.patients\r\n        }\r\n      };\r\n    case \"ADD_PATIENT\":\r\n      return {\r\n        ...state,\r\n        patients: {\r\n          ...state.patients,\r\n          [action.payload.id]: action.payload\r\n        }\r\n      };\r\n    case \"UPDATE_PATIENT\":\r\n      return {\r\n        ...state,\r\n        patients: {\r\n          ...state.patients,\r\n          [action.payload.id]: action.payload\r\n        }\r\n      };\r\n    case \"SET_DIAGNOSIS_LIST\":\r\n      return {\r\n        ...state,\r\n        diagnosisCodes: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\nimport { Patient } from \"../types\";\r\n\r\nimport { Action } from \"./reducer\";\r\nimport { Diagnosis } from './../types';\r\n\r\nexport type State = {\r\n  patients: { [id: string]: Patient };\r\n  diagnosisCodes: Diagnosis[];\r\n};\r\n\r\nconst initialState: State = {\r\n  patients: {},\r\n  diagnosisCodes: []\r\n};\r\n\r\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\r\n  initialState,\r\n  () => initialState\r\n]);\r\n\r\ntype StateProviderProps = {\r\n  reducer: React.Reducer<State, Action>;\r\n  children: React.ReactElement;\r\n};\r\n\r\nexport const StateProvider: React.FC<StateProviderProps> = ({\r\n  reducer,\r\n  children\r\n}: StateProviderProps) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <StateContext.Provider value={[state, dispatch]}>\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\r\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\r\nimport { Diagnosis, Gender } from \"../types\";\r\n\r\n// structure of a single option\r\nexport type GenderOption = {\r\n  value: Gender;\r\n  label: string;\r\n};\r\n\r\n// props for select field component\r\ntype SelectFieldProps = {\r\n  name: string;\r\n  label: string;\r\n  options: GenderOption[];\r\n  id?: string;\r\n};\r\n\r\nexport const SelectField: React.FC<SelectFieldProps> = ({\r\n  name,\r\n  label,\r\n  options,\r\n  id\r\n}: SelectFieldProps) => {\r\n  id = id ? id : uuidv4();\r\n  return (\r\n    <Form.Field>\r\n      <label htmlFor={id}>{label}</label>\r\n      <Field id={id} as=\"select\" name={name} className=\"ui dropdown\">\r\n        {options.map(option => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label || option.value}\r\n          </option>\r\n        ))}\r\n      </Field>\r\n    </Form.Field>\r\n  );\r\n};\r\n\r\ninterface TextProps extends FieldProps {\r\n  label: string;\r\n  placeholder: string;\r\n  id?: string;\r\n}\r\n\r\nexport const TextField: React.FC<TextProps> = ({\r\n  field,\r\n  label,\r\n  placeholder,\r\n  id\r\n}) => {\r\n  id = id ? id : uuidv4();\r\n  return (\r\n    <Form.Field>\r\n      <label htmlFor={id}>{label}</label>\r\n      <Field id={id} placeholder={placeholder} {...field} />\r\n      <div style={{ color: 'red' }}>\r\n        <ErrorMessage name={field.name} />\r\n      </div>\r\n    </Form.Field>\r\n  );\r\n};\r\n\r\n/*\r\n  for exercises 9.24.-\r\n*/\r\ninterface NumberProps extends FieldProps {\r\n  label: string;\r\n  errorMessage?: string;\r\n  min: number;\r\n  max: number;\r\n  id?: string;\r\n}\r\n\r\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max, id }) => {\r\n  id = id ? id : uuidv4();\r\n  return (\r\n    <Form.Field>\r\n      <label htmlFor={id}>{label}</label>\r\n      <Field id={id} {...field} type='number' min={min} max={max} />\r\n\r\n      <div style={{ color: 'red' }}>\r\n        <ErrorMessage name={field.name} />\r\n      </div>\r\n    </Form.Field>\r\n  );\r\n};\r\n\r\nexport const DiagnosisSelection = ({\r\n  diagnoses,\r\n  setFieldValue,\r\n  setFieldTouched\r\n}: {\r\n  diagnoses: Diagnosis[];\r\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\r\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\r\n}) => {\r\n  const field = \"diagnosisCodes\";\r\n  const onChange = (\r\n    _event: React.SyntheticEvent<HTMLElement, Event>,\r\n    data: DropdownProps\r\n  ) => {\r\n    setFieldTouched(field, true);\r\n    setFieldValue(field, data.value);\r\n  };\r\n\r\n  const stateOptions = diagnoses.map(diagnosis => ({\r\n    key: diagnosis.code,\r\n    text: `${diagnosis.name} (${diagnosis.code})`,\r\n    value: diagnosis.code\r\n  }));\r\n\r\n  return (\r\n    <Form.Field>\r\n      <label>Diagnoses</label>\r\n      <Dropdown\r\n        fluid\r\n        multiple\r\n        search\r\n        selection\r\n        options={stateOptions}\r\n        onChange={onChange}\r\n      />\r\n      <ErrorMessage name={field} />\r\n    </Form.Field>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\n\r\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\r\nimport { Gender, Patient } from \"../types\";\r\n\r\n/*\r\n * use type Patient, but omit id and entries,\r\n * because those are irrelevant for new patient object.\r\n */\r\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\r\n\r\ninterface Props {\r\n  onSubmit: (values: PatientFormValues) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst genderOptions: GenderOption[] = [\r\n  { value: Gender.Male, label: \"Male\" },\r\n  { value: Gender.Female, label: \"Female\" },\r\n  { value: Gender.Other, label: \"Other\" }\r\n];\r\n\r\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        ssn: \"\",\r\n        dateOfBirth: \"\",\r\n        occupation: \"\",\r\n        gender: Gender.Other\r\n      }}\r\n      onSubmit={onSubmit}\r\n      validate={values => {\r\n        const requiredError = \"Field is required\";\r\n        const errors: { [field: string]: string } = {};\r\n        if (!values.name) {\r\n          errors.name = requiredError;\r\n        }\r\n        if (!values.ssn) {\r\n          errors.ssn = requiredError;\r\n        }\r\n        if (!values.dateOfBirth) {\r\n          errors.dateOfBirth = requiredError;\r\n        }\r\n        if (!values.occupation) {\r\n          errors.occupation = requiredError;\r\n        }\r\n        return errors;\r\n      }}\r\n    >\r\n      {({ isValid, dirty }) => {\r\n        return (\r\n          <Form className=\"form ui\">\r\n            <Field\r\n              label=\"Name\"\r\n              placeholder=\"Name\"\r\n              name=\"name\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Social Security Number\"\r\n              placeholder=\"SSN\"\r\n              name=\"ssn\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Date Of Birth\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"dateOfBirth\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Occupation\"\r\n              placeholder=\"Occupation\"\r\n              name=\"occupation\"\r\n              component={TextField}\r\n            />\r\n            <SelectField\r\n              label=\"Gender\"\r\n              name=\"gender\"\r\n              options={genderOptions}\r\n            />\r\n            <Grid>\r\n              <Grid.Column floated=\"left\" width={5}>\r\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                  Cancel\r\n                </Button>\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={5}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  floated=\"right\"\r\n                  color=\"green\"\r\n                  disabled={!dirty || !isValid}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddPatientForm;\r\n","import React from 'react';\r\nimport { Modal, Segment } from 'semantic-ui-react';\r\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\r\n\r\ninterface Props {\r\n  modalOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (values: PatientFormValues) => void;\r\n  error?: string;\r\n}\r\n\r\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\r\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\r\n    <Modal.Header>Add a new patient</Modal.Header>\r\n    <Modal.Content>\r\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\r\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\r\n    </Modal.Content>\r\n  </Modal>\r\n);\r\n\r\nexport default AddPatientModal;\r\n","import React from 'react';\r\nimport { Rating } from 'semantic-ui-react';\r\n\r\ntype BarProps = {\r\n  rating: number;\r\n  showText: boolean;\r\n};\r\n\r\nconst HEALTHBAR_TEXTS = [\r\n  'The patient is in great shape',\r\n  'The patient has a low risk of getting sick',\r\n  'The patient has a high risk of getting sick',\r\n  'The patient has a diagnosed condition',\r\n];\r\n\r\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\r\n  return (\r\n    <div className=\"health-bar\">\r\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\r\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthRatingBar;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Container, Table, Button } from \"semantic-ui-react\";\r\n\r\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\r\nimport AddPatientModal from \"../AddPatientModal\";\r\nimport { Patient } from \"../types\";\r\nimport { apiBaseUrl } from \"../constants\";\r\nimport HealthRatingBar from \"../components/HealthRatingBar\";\r\nimport { useStateValue, addPatient } from \"../state\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst PatientListPage: React.FC = () => {\r\n  const [{ patients }, dispatch] = useStateValue();\r\n\r\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\r\n  const [error, setError] = React.useState<string | undefined>();\r\n\r\n  const openModal = (): void => setModalOpen(true);\r\n\r\n  const closeModal = (): void => {\r\n    setModalOpen(false);\r\n    setError(undefined);\r\n  };\r\n\r\n  const submitNewPatient = async (values: PatientFormValues) => {\r\n    try {\r\n      const { data: newPatient } = await axios.post<Patient>(\r\n        `${apiBaseUrl}/patients`,\r\n        values\r\n      );\r\n      dispatch(addPatient(newPatient));\r\n      closeModal();\r\n    } catch (e) {\r\n      console.error(e.response.data);\r\n      setError(e.response.data.error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container textAlign=\"center\">\r\n        <h3>Patient list</h3>\r\n      </Container>\r\n      <Table celled>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell>Name</Table.HeaderCell>\r\n            <Table.HeaderCell>Gender</Table.HeaderCell>\r\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\r\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>\r\n          {Object.values(patients).map((patient: Patient) => (\r\n            <Table.Row key={patient.id}>\r\n              <Table.Cell><Link to={`/${patient.id}`}>{patient.name}</Link></Table.Cell>\r\n              <Table.Cell>{patient.gender}</Table.Cell>\r\n              <Table.Cell>{patient.occupation}</Table.Cell>\r\n              <Table.Cell>\r\n                <HealthRatingBar showText={false} rating={1} />\r\n              </Table.Cell>\r\n            </Table.Row>\r\n          ))}\r\n        </Table.Body>\r\n      </Table>\r\n      <AddPatientModal\r\n        modalOpen={modalOpen}\r\n        onSubmit={submitNewPatient}\r\n        error={error}\r\n        onClose={closeModal}\r\n      />\r\n      <Button onClick={() => openModal()}>Add New Patient</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientListPage;\r\n","\r\nimport React from \"react\";\r\nimport { HospitalEntry, OccupationalHealthCareEntry, HealthCheckEntry, HealthCheckRating } from '../types';\r\nimport { Icon, Label } from \"semantic-ui-react\";\r\n\r\nexport const Hospital: React.FC<{ entry: HospitalEntry }> = ({ entry }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<b>Discharged:</b> {entry.discharge.date}\r\n\t\t\t<br />\r\n\t\t\t<b>Discharge reason:</b> {entry.discharge.criteria}\r\n\t\t</div >\r\n\t);\r\n};\r\n\r\nexport const OccupationalHealthCare: React.FC<{ entry: OccupationalHealthCareEntry }> = ({ entry }) => {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<b>Employer:</b> {entry.employerName}\r\n\t\t\t<br />\r\n\t\t\t<b>Sick leave:</b> {entry.sickLeave ? `${entry.sickLeave?.startDate} - ${entry.sickLeave?.endDate}` : \"No\"}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport const HealthCheck: React.FC<{ entry: HealthCheckEntry }> = ({ entry }) => {\r\n\r\n\tconst ratingToColor = (rating: HealthCheckRating) => {\r\n\t\tswitch (rating) {\r\n\t\t\tcase HealthCheckRating.Healthy:\r\n\t\t\t\treturn \"green\";\r\n\t\t\tcase HealthCheckRating.LowRisk:\r\n\t\t\t\treturn \"yellow\";\r\n\t\t\tcase HealthCheckRating.HighRisk:\r\n\t\t\t\treturn \"orange\";\r\n\t\t\tcase HealthCheckRating.CriticalRisk:\r\n\t\t\t\treturn \"red\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"black\";\r\n\t\t}\r\n\t};\r\n\r\n\tconst ratingToDescription = (rating: HealthCheckRating) => {\r\n\t\tswitch (rating) {\r\n\t\t\tcase HealthCheckRating.Healthy:\r\n\t\t\t\treturn \"Healthy\";\r\n\t\t\tcase HealthCheckRating.LowRisk:\r\n\t\t\t\treturn \"Low risk\";\r\n\t\t\tcase HealthCheckRating.HighRisk:\r\n\t\t\t\treturn \"High risk\";\r\n\t\t\tcase HealthCheckRating.CriticalRisk:\r\n\t\t\t\treturn \"Critical risk\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"Unknown health rating\";\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Label>\r\n\t\t\t\t<Icon name=\"heart\" color={ratingToColor(entry.healthCheckRating)} />\r\n\t\t\t\t{ratingToDescription(entry.healthCheckRating)}\r\n\t\t\t</Label>\r\n\t\t</div>\r\n\t);\r\n};","/**\r\n * Naively tests if the given string is in the format of YYYY-MM-DD\r\n * \r\n * TODO: Expand if/when needed. Consider switching to Moment or an actual validation library.\r\n */\r\nexport function isValidDateString(dateString: string): boolean {\r\n\treturn /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/i.test(dateString);\r\n}","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\n\r\nimport { TextField } from \"../AddPatientModal/FormField\";\r\nimport { HospitalEntry, EntryTypes } from \"../types\";\r\nimport { useStateValue } from \"../state\";\r\nimport { DiagnosisSelection } from './../AddPatientModal/FormField';\r\nimport { isValidDateString } from './../validationHelpers';\r\n\r\ninterface Props {\r\n\tonSubmit: (values: Omit<HospitalEntry, \"id\">) => void;\r\n\tonCancel: () => void;\r\n}\r\n\r\nexport const HospitalEntryForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n\r\n\tconst [{ diagnosisCodes }] = useStateValue();\r\n\r\n\t/*\r\n\t\tNOTE TO SELF\r\n\t\tEven though Formik says it supports nested values using the dot notation in field names (ie: \"discharge.date\" is handled as an object),\r\n\t\tthis seems to cause problems on the validation site. Formik's ErrorMessage component not detect the error, even though the errors \r\n\t\tare added to the error-object in the forms validation function.\r\n\r\n\t\tJust for simplicity's sake the form data will be flattened for now. As long as the form component submits the proper object everything should be fine.\r\n\r\n\t\tTODO: Investigate the proper solution for handling nested objects in Formik\r\n\t\tMore information: https://jaredpalmer.com/formik/docs/api/field#name, https://github.com/jaredpalmer/formik/issues/1091\r\n\t*/\r\n\r\n\tconst formDefaults = {\r\n\t\tdescription: \"\",\r\n\t\tdate: \"\",\r\n\t\tspecialist: \"\",\r\n\t\tdiagnosisCodes: [],\r\n\t\tdischargeDate: \"\",\r\n\t\tdischargeCriteria: \"\"\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Formik\r\n\t\t\tinitialValues={formDefaults}\r\n\t\t\tonSubmit={(formValues) => {\r\n\t\t\t\t//Handle transforming data back to the correct nested structure after flattening it\r\n\t\t\t\tonSubmit({\r\n\t\t\t\t\tdescription: formValues.description,\r\n\t\t\t\t\tdate: formValues.date,\r\n\t\t\t\t\tspecialist: formValues.specialist,\r\n\t\t\t\t\tdiagnosisCodes: formValues.diagnosisCodes,\r\n\t\t\t\t\ttype: EntryTypes.Hospital,\r\n\t\t\t\t\tdischarge: {\r\n\t\t\t\t\t\tdate: formValues.dischargeDate,\r\n\t\t\t\t\t\tcriteria: formValues.dischargeCriteria\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}}\r\n\t\t\tvalidate={(values) => {\r\n\t\t\t\tconst requiredError = \"Field is required\";\r\n\t\t\t\tconst errors: { [field: string]: string } = {};\r\n\r\n\t\t\t\tif (!values.description) {\r\n\t\t\t\t\terrors.description = requiredError;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!values.date) {\r\n\t\t\t\t\terrors.date = requiredError;\r\n\t\t\t\t} else if (!isValidDateString(values.date)) {\r\n\t\t\t\t\terrors.date = \"Date is formatted incorrectly. Expected YYYY-MM-DD format\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!values.specialist) {\r\n\t\t\t\t\terrors.specialist = requiredError;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!values.dischargeDate) {\r\n\t\t\t\t\terrors.dischargeDate = requiredError;\r\n\t\t\t\t} else if (!isValidDateString(values.date)) {\r\n\t\t\t\t\terrors.dischargeDate = \"Discharge date is formatted incorrectly. Expected YYYY-MM-DD format\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!values.dischargeCriteria) {\r\n\t\t\t\t\terrors.dischargeCriteria = requiredError;\r\n\t\t\t\t}\r\n\t\t\t\treturn errors;\r\n\t\t\t}}\r\n\t\t>\r\n\r\n\t\t\t{({ isValid, dirty, setFieldValue, setFieldTouched }) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Form className=\"form ui\">\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tlabel=\"Description\"\r\n\t\t\t\t\t\t\tplaceholder=\"Description\"\r\n\t\t\t\t\t\t\tname=\"description\"\r\n\t\t\t\t\t\t\tcomponent={TextField}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tlabel=\"Date\"\r\n\t\t\t\t\t\t\tplaceholder=\"YYYY-MM-DD\"\r\n\t\t\t\t\t\t\tname=\"date\"\r\n\t\t\t\t\t\t\tcomponent={TextField}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tlabel=\"Specialist\"\r\n\t\t\t\t\t\t\tplaceholder=\"Specialist\"\r\n\t\t\t\t\t\t\tname=\"specialist\"\r\n\t\t\t\t\t\t\tcomponent={TextField}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tlabel=\"Discharge date\"\r\n\t\t\t\t\t\t\tplaceholder=\"YYYY-MM-DD\"\r\n\t\t\t\t\t\t\tname=\"dischargeDate\"\r\n\t\t\t\t\t\t\tcomponent={TextField}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tlabel=\"Criteria\"\r\n\t\t\t\t\t\t\tplaceholder=\"Criteria\"\r\n\t\t\t\t\t\t\tname=\"dischargeCriteria\"\r\n\t\t\t\t\t\t\tcomponent={TextField}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<DiagnosisSelection\r\n\t\t\t\t\t\t\tsetFieldValue={setFieldValue}\r\n\t\t\t\t\t\t\tsetFieldTouched={setFieldTouched}\r\n\t\t\t\t\t\t\tdiagnoses={Object.values(diagnosisCodes)}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Grid>\r\n\r\n\t\t\t\t\t\t\t<Grid.Column floated=\"left\" width={5}>\r\n\t\t\t\t\t\t\t\t<Button type=\"button\" onClick={onCancel} color=\"red\">Cancel</Button>\r\n\t\t\t\t\t\t\t</Grid.Column>\r\n\r\n\t\t\t\t\t\t\t<Grid.Column floated=\"right\" width={5}>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\t\tfloated=\"right\"\r\n\t\t\t\t\t\t\t\t\tcolor=\"green\"\r\n\t\t\t\t\t\t\t\t\tdisabled={!dirty || !isValid}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tAdd entry\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</Grid.Column>\r\n\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t);\r\n\t\t\t}}\r\n\r\n\t\t</Formik >\r\n\t);\r\n};\r\n\r\nexport default HospitalEntryForm;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\n\r\nimport { TextField } from \"../AddPatientModal/FormField\";\r\nimport { EntryTypes, OccupationalHealthCareEntry } from \"../types\";\r\nimport { useStateValue } from \"../state\";\r\nimport { DiagnosisSelection } from './../AddPatientModal/FormField';\r\nimport { isValidDateString } from './../validationHelpers';\r\n\r\ninterface Props {\r\n\tonSubmit: (values: Omit<OccupationalHealthCareEntry, \"id\">) => void;\r\n\tonCancel: () => void;\r\n}\r\n\r\nexport const OccupationealHealthcareForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n\r\n\tconst [{ diagnosisCodes }] = useStateValue();\r\n\r\n\tconst formDefaults = {\r\n\t\tdescription: \"\",\r\n\t\tdate: \"\",\r\n\t\tspecialist: \"\",\r\n\t\tdiagnosisCodes: [],\r\n\t\temployerName: \"\",\r\n\t\tsickLeaveStartDate: \"\",\r\n\t\tsickLeaveEndDate: \"\"\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Formik\r\n\t\t\tinitialValues={formDefaults}\r\n\t\t\tonSubmit={(formValues) => {\r\n\t\t\t\t//Handle transforming data back to the correct nested structure after flattening it\r\n\t\t\t\tonSubmit({\r\n\t\t\t\t\tdescription: formValues.description,\r\n\t\t\t\t\tdate: formValues.date,\r\n\t\t\t\t\tspecialist: formValues.specialist,\r\n\t\t\t\t\tdiagnosisCodes: formValues.diagnosisCodes,\r\n\t\t\t\t\ttype: EntryTypes.OccupationalHealthcare,\r\n\t\t\t\t\temployerName: formValues.employerName,\r\n\t\t\t\t\tsickLeave: {\r\n\t\t\t\t\t\tstartDate: formValues.sickLeaveStartDate,\r\n\t\t\t\t\t\tendDate: formValues.sickLeaveEndDate\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}}\r\n\t\t\tvalidate={(values) => {\r\n\t\t\t\tconst requiredError = \"Field is required\";\r\n\t\t\t\tconst errors: { [field: string]: string } = {};\r\n\r\n\t\t\t\tif (!values.description) {\r\n\t\t\t\t\terrors.description = requiredError;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!values.date) {\r\n\t\t\t\t\terrors.date = requiredError;\r\n\t\t\t\t} else if (!isValidDateString(values.date)) {\r\n\t\t\t\t\terrors.date = \"Date is formatted incorrectly. Expected YYYY-MM-DD format\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!values.specialist) {\r\n\t\t\t\t\terrors.specialist = requiredError;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!values.employerName) {\r\n\t\t\t\t\terrors.employerName = requiredError;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (values.sickLeaveStartDate !== \"\" && !isValidDateString(values.sickLeaveStartDate)) {\r\n\t\t\t\t\terrors.sickLeaveStartDate = \"Sick leave start date is formatted incorrectly. Expected empty or YYYY-MM-DD format\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (values.sickLeaveEndDate !== \"\" && !isValidDateString(values.sickLeaveEndDate)) {\r\n\t\t\t\t\terrors.sickLeaveEndDate = \"Sick leave start date is formatted incorrectly. Expected empty or YYYY-MM-DD format\";\r\n\t\t\t\t}\r\n\t\t\t\treturn errors;\r\n\t\t\t}}\r\n\t\t>\r\n\r\n\t\t\t{({ isValid, dirty, setFieldValue, setFieldTouched }) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Form className=\"form ui\">\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tlabel=\"Description\"\r\n\t\t\t\t\t\t\tplaceholder=\"Description\"\r\n\t\t\t\t\t\t\tname=\"description\"\r\n\t\t\t\t\t\t\tcomponent={TextField}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tlabel=\"Date\"\r\n\t\t\t\t\t\t\tplaceholder=\"YYYY-MM-DD\"\r\n\t\t\t\t\t\t\tname=\"date\"\r\n\t\t\t\t\t\t\tcomponent={TextField}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tlabel=\"Specialist\"\r\n\t\t\t\t\t\t\tplaceholder=\"Specialist\"\r\n\t\t\t\t\t\t\tname=\"specialist\"\r\n\t\t\t\t\t\t\tcomponent={TextField}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tlabel=\"Employer name\"\r\n\t\t\t\t\t\t\tplaceholder=\"Employer name\"\r\n\t\t\t\t\t\t\tname=\"employerName\"\r\n\t\t\t\t\t\t\tcomponent={TextField}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tlabel=\"Sick leave start date\"\r\n\t\t\t\t\t\t\tplaceholder=\"YYYY-MM-DD\"\r\n\t\t\t\t\t\t\tname=\"sickLeaveStartDate\"\r\n\t\t\t\t\t\t\tcomponent={TextField}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tlabel=\"Sick leave end date\"\r\n\t\t\t\t\t\t\tplaceholder=\"YYYY-MM-DD\"\r\n\t\t\t\t\t\t\tname=\"sickLeaveEndDate\"\r\n\t\t\t\t\t\t\tcomponent={TextField}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<DiagnosisSelection\r\n\t\t\t\t\t\t\tsetFieldValue={setFieldValue}\r\n\t\t\t\t\t\t\tsetFieldTouched={setFieldTouched}\r\n\t\t\t\t\t\t\tdiagnoses={Object.values(diagnosisCodes)}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Grid>\r\n\r\n\t\t\t\t\t\t\t<Grid.Column floated=\"left\" width={5}>\r\n\t\t\t\t\t\t\t\t<Button type=\"button\" onClick={onCancel} color=\"red\">Cancel</Button>\r\n\t\t\t\t\t\t\t</Grid.Column>\r\n\r\n\t\t\t\t\t\t\t<Grid.Column floated=\"right\" width={5}>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\t\tfloated=\"right\"\r\n\t\t\t\t\t\t\t\t\tcolor=\"green\"\r\n\t\t\t\t\t\t\t\t\tdisabled={!dirty || !isValid}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tAdd entry\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</Grid.Column>\r\n\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t);\r\n\t\t\t}}\r\n\r\n\t\t</Formik >\r\n\t);\r\n};\r\n\r\nexport default OccupationealHealthcareForm;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\n\r\nimport { TextField } from \"../AddPatientModal/FormField\";\r\nimport { EntryTypes, HealthCheckEntry, HealthCheckRating } from \"../types\";\r\nimport { useStateValue } from \"../state\";\r\nimport { DiagnosisSelection } from './../AddPatientModal/FormField';\r\nimport { isValidDateString } from './../validationHelpers';\r\n\r\ninterface Props {\r\n\tonSubmit: (values: Omit<HealthCheckEntry, \"id\">) => void;\r\n\tonCancel: () => void;\r\n}\r\n\r\nexport const HealthCheckForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n\r\n\tconst [{ diagnosisCodes }] = useStateValue();\r\n\r\n\tconst formDefaults = {\r\n\t\tdescription: \"\",\r\n\t\tdate: \"\",\r\n\t\tspecialist: \"\",\r\n\t\tdiagnosisCodes: [],\r\n\t\thealthCheckRating: HealthCheckRating.Healthy,\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Formik\r\n\t\t\tinitialValues={formDefaults}\r\n\t\t\tonSubmit={(formValues) => {\r\n\t\t\t\t//Handle transforming data to correct type\r\n\t\t\t\tonSubmit({\r\n\t\t\t\t\tdescription: formValues.description,\r\n\t\t\t\t\tdate: formValues.date,\r\n\t\t\t\t\tspecialist: formValues.specialist,\r\n\t\t\t\t\tdiagnosisCodes: formValues.diagnosisCodes,\r\n\t\t\t\t\ttype: EntryTypes.HealthCheck,\r\n\t\t\t\t\thealthCheckRating: Number(formValues.healthCheckRating)\r\n\t\t\t\t});\r\n\t\t\t}}\r\n\t\t\tvalidate={(values) => {\r\n\t\t\t\tconst requiredError = \"Field is required\";\r\n\t\t\t\tconst errors: { [field: string]: string } = {};\r\n\r\n\t\t\t\tif (!values.description) {\r\n\t\t\t\t\terrors.description = requiredError;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!values.date) {\r\n\t\t\t\t\terrors.date = requiredError;\r\n\t\t\t\t} else if (!isValidDateString(values.date)) {\r\n\t\t\t\t\terrors.date = \"Date is formatted incorrectly. Expected YYYY-MM-DD format\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!values.specialist) {\r\n\t\t\t\t\terrors.specialist = requiredError;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn errors;\r\n\t\t\t}}\r\n\t\t>\r\n\r\n\t\t\t{({ isValid, dirty, setFieldValue, setFieldTouched }) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Form className=\"form ui\">\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tlabel=\"Description\"\r\n\t\t\t\t\t\t\tplaceholder=\"Description\"\r\n\t\t\t\t\t\t\tname=\"description\"\r\n\t\t\t\t\t\t\tcomponent={TextField}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tlabel=\"Date\"\r\n\t\t\t\t\t\t\tplaceholder=\"YYYY-MM-DD\"\r\n\t\t\t\t\t\t\tname=\"date\"\r\n\t\t\t\t\t\t\tcomponent={TextField}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tlabel=\"Specialist\"\r\n\t\t\t\t\t\t\tplaceholder=\"Specialist\"\r\n\t\t\t\t\t\t\tname=\"specialist\"\r\n\t\t\t\t\t\t\tcomponent={TextField}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tlabel=\"Health rating\"\r\n\t\t\t\t\t\t\tplaceholder=\"\"\r\n\t\t\t\t\t\t\tname=\"healthCheckRating\"\r\n\t\t\t\t\t\t\tcomponent=\"select\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<option value={HealthCheckRating.Healthy}>Healthy</option>\r\n\t\t\t\t\t\t\t<option value={HealthCheckRating.LowRisk}>Low risk</option>\r\n\t\t\t\t\t\t\t<option value={HealthCheckRating.HighRisk}>High risk</option>\r\n\t\t\t\t\t\t\t<option value={HealthCheckRating.CriticalRisk}>Critical risk</option>\r\n\r\n\t\t\t\t\t\t</Field>\r\n\r\n\r\n\t\t\t\t\t\t<DiagnosisSelection\r\n\t\t\t\t\t\t\tsetFieldValue={setFieldValue}\r\n\t\t\t\t\t\t\tsetFieldTouched={setFieldTouched}\r\n\t\t\t\t\t\t\tdiagnoses={Object.values(diagnosisCodes)}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Grid>\r\n\r\n\t\t\t\t\t\t\t<Grid.Column floated=\"left\" width={5}>\r\n\t\t\t\t\t\t\t\t<Button type=\"button\" onClick={onCancel} color=\"red\">Cancel</Button>\r\n\t\t\t\t\t\t\t</Grid.Column>\r\n\r\n\t\t\t\t\t\t\t<Grid.Column floated=\"right\" width={5}>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\t\tfloated=\"right\"\r\n\t\t\t\t\t\t\t\t\tcolor=\"green\"\r\n\t\t\t\t\t\t\t\t\tdisabled={!dirty || !isValid}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tAdd entry\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</Grid.Column>\r\n\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t);\r\n\t\t\t}}\r\n\r\n\t\t</Formik >\r\n\t);\r\n};\r\n\r\nexport default HealthCheckForm;\r\n","import React from 'react';\r\nimport { HospitalEntryForm } from './HospitalEntryForm';\r\nimport { OccupationealHealthcareForm } from './OccupationalHealthcareForm';\r\nimport { HealthCheckForm } from './HealthCheckForm';\r\nimport { Entry, EntryTypes } from '../types';\r\nimport { Header, Select, Divider } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n\tonSubmit: (values: Omit<Entry, \"id\">) => void;\r\n}\r\n\r\nconst AddPatientEntry = ({ onSubmit }: Props) => {\r\n\r\n\tconst [currentEntryType, setCurrentEntryType] = React.useState<string>();\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Header as=\"h3\">Add new entry</Header>\r\n\r\n\t\t\t<b>Entry type: </b>\r\n\t\t\t<Select\r\n\t\t\t\tplaceholder='Select type'\r\n\t\t\t\tvalue={currentEntryType}\r\n\t\t\t\tonChange={(e, data) => setCurrentEntryType(data.value as string)}\r\n\t\t\t\toptions={[\r\n\t\t\t\t\t{ key: \"none\", value: \"none\", text: '' },\r\n\t\t\t\t\t{ key: EntryTypes.Hospital, value: EntryTypes.Hospital, text: 'Hospital' },\r\n\t\t\t\t\t{ key: EntryTypes.OccupationalHealthcare, value: EntryTypes.OccupationalHealthcare, text: 'Occupational healthcare' },\r\n\t\t\t\t\t{ key: EntryTypes.HealthCheck, value: EntryTypes.HealthCheck, text: 'Health check' }\r\n\t\t\t\t]} />\r\n\r\n\t\t\t<Divider />\r\n\r\n\t\t\t{currentEntryType === EntryTypes.Hospital &&\r\n\t\t\t\t<HospitalEntryForm\r\n\t\t\t\t\tonSubmit={(formValues) => {\r\n\t\t\t\t\t\tsetCurrentEntryType(\"\");\r\n\t\t\t\t\t\tonSubmit(formValues);\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonCancel={() => setCurrentEntryType(\"\")}\r\n\t\t\t\t/>\r\n\t\t\t}\r\n\r\n\t\t\t{currentEntryType === EntryTypes.OccupationalHealthcare &&\r\n\t\t\t\t<OccupationealHealthcareForm\r\n\t\t\t\t\tonSubmit={(formValues) => {\r\n\t\t\t\t\t\tsetCurrentEntryType(\"\");\r\n\t\t\t\t\t\tonSubmit(formValues);\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonCancel={() => setCurrentEntryType(\"\")}\r\n\t\t\t\t/>\r\n\t\t\t}\r\n\r\n\t\t\t{currentEntryType === EntryTypes.HealthCheck &&\r\n\t\t\t\t<HealthCheckForm\r\n\t\t\t\t\tonSubmit={(formValues) => {\r\n\t\t\t\t\t\tsetCurrentEntryType(\"\");\r\n\t\t\t\t\t\tonSubmit(formValues);\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonCancel={() => setCurrentEntryType(\"\")}\r\n\t\t\t\t/>\r\n\t\t\t}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default AddPatientEntry;","/* eslint-disable react/display-name */\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Header, Icon, Table, Container, Segment, Divider } from 'semantic-ui-react';\r\n\r\nimport { apiBaseUrl } from './../constants';\r\nimport { useStateValue, updatePatient } from \"../state\";\r\nimport { Patient, Entry, EntryTypes, Diagnosis, Gender } from \"../types\";\r\nimport { Hospital, OccupationalHealthCare, HealthCheck } from \"./EntryComponents\";\r\nimport AddPatientEntry from \"../AddPatientEntry\";\r\n\r\nconst PatientDetailsPage = () => {\r\n\tconst { id } = useParams<{ id: string }>();\r\n\tconst [{ patients, diagnosisCodes }, dispatch] = useStateValue();\r\n\tconst currentPatient = patients[id];\r\n\tconst [error, setError] = React.useState<string | undefined>();\r\n\r\n\tReact.useEffect(() => {\r\n\t\tconst shouldFetchData = currentPatient && !currentPatient.fetchTimestamp;\r\n\t\tif (shouldFetchData) {\r\n\t\t\tconst fetchPatientDetails = async () => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst { data: patientDetails } = await axios.get<Patient>(`${apiBaseUrl}/patients/${id}`);\r\n\t\t\t\t\tpatientDetails.fetchTimestamp = Math.floor(Date.now() / 1000);\r\n\t\t\t\t\tdispatch(updatePatient(patientDetails));\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.error(e);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tfetchPatientDetails();\r\n\t\t}\r\n\t}, [currentPatient, dispatch, id]);\r\n\r\n\tconst postPatientEntry = async (values: Omit<Entry, \"id\">) => {\r\n\t\ttry {\r\n\t\t\tconst response = await axios.post<Entry>(`${apiBaseUrl}/patients/${id}/entries`, values);\r\n\t\t\tconst tempPatient = { ...patients[id] };\r\n\t\t\ttempPatient.entries?.push(response.data);\r\n\t\t\tdispatch(updatePatient(tempPatient));\r\n\t\t\tsetError(\"\");\r\n\t\t} catch (e) {\r\n\t\t\tsetError(e.response.data.error);\r\n\t\t}\r\n\t};\r\n\r\n\tconst assertNever = (value: never): never => {\r\n\t\tthrow new Error(`Unhandled value: ${JSON.stringify(value)}`);\r\n\t};\r\n\r\n\tconst getGenderIconName = (gender: string) => {\r\n\t\tswitch (gender) {\r\n\t\t\tcase Gender.Male:\r\n\t\t\t\treturn \"man\";\r\n\t\t\tcase Gender.Female:\r\n\t\t\t\treturn \"woman\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"other gender horizontal\";\r\n\t\t}\r\n\t};\r\n\r\n\tconst getEntryTypeIconName = (type: string) => {\r\n\t\tswitch (type) {\r\n\t\t\tcase EntryTypes.Hospital:\r\n\t\t\t\treturn \"hospital\";\r\n\t\t\tcase EntryTypes.OccupationalHealthcare:\r\n\t\t\t\treturn \"medkit\";\r\n\t\t\tcase EntryTypes.HealthCheck:\r\n\t\t\t\treturn \"doctor\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"question\";\r\n\t\t}\r\n\t};\r\n\r\n\tconst EntryDetails: React.FC<{ entry: Entry }> = ({ entry }) => {\r\n\t\tswitch (entry.type) {\r\n\t\t\tcase EntryTypes.Hospital:\r\n\t\t\t\treturn <Hospital entry={entry} />;\r\n\t\t\tcase EntryTypes.OccupationalHealthcare:\r\n\t\t\t\treturn <OccupationalHealthCare entry={entry} />;\r\n\t\t\tcase EntryTypes.HealthCheck:\r\n\t\t\t\treturn <HealthCheck entry={entry} />;\r\n\t\t\tdefault:\r\n\t\t\t\treturn assertNever(entry);\r\n\t\t}\r\n\t};\r\n\r\n\tconst CodeList: React.FC<{ listOfCodes: string[] | undefined }> = ({ listOfCodes }) => {\r\n\t\tif (!listOfCodes) {\r\n\t\t\treturn null;\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Header as=\"h3\">codes</Header>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{listOfCodes.map((code) => {\r\n\t\t\t\t\t\t\tconst matchingCode = diagnosisCodes.find((diagnosis: Diagnosis) => diagnosis.code === code);\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<li key={`${Math.random()}_${code}`}>\r\n\t\t\t\t\t\t\t\t\t{code} {matchingCode?.name}\r\n\t\t\t\t\t\t\t\t</li>);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\tif (!currentPatient) {\r\n\t\treturn null;\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<Container>\r\n\t\t\t\t<Segment>\r\n\t\t\t\t\t<Header as=\"h2\">\r\n\t\t\t\t\t\t{currentPatient.name} <Icon name={getGenderIconName(currentPatient.gender)} />\r\n\t\t\t\t\t</Header>\r\n\r\n\t\t\t\t\t<Table celled>\r\n\t\t\t\t\t\t<Table.Body>\r\n\t\t\t\t\t\t\t<Table.Row>\r\n\t\t\t\t\t\t\t\t<Table.Cell>ssn</Table.Cell>\r\n\t\t\t\t\t\t\t\t<Table.Cell>{currentPatient.ssn}</Table.Cell>\r\n\t\t\t\t\t\t\t</Table.Row>\r\n\t\t\t\t\t\t\t<Table.Row>\r\n\t\t\t\t\t\t\t\t<Table.Cell>occupation</Table.Cell>\r\n\t\t\t\t\t\t\t\t<Table.Cell>{currentPatient.occupation}</Table.Cell>\r\n\t\t\t\t\t\t\t</Table.Row>\r\n\t\t\t\t\t\t\t<Table.Row>\r\n\t\t\t\t\t\t\t\t<Table.Cell>date of birth:</Table.Cell>\r\n\t\t\t\t\t\t\t\t<Table.Cell>{currentPatient.dateOfBirth}</Table.Cell>\r\n\t\t\t\t\t\t\t</Table.Row>\r\n\t\t\t\t\t\t</Table.Body>\r\n\t\t\t\t\t</Table>\r\n\t\t\t\t</Segment>\r\n\r\n\t\t\t\t<Segment>\r\n\t\t\t\t\t{error &&\r\n\t\t\t\t\t\t<Segment inverted color=\"red\">\r\n\t\t\t\t\t\t\t{`Error: ${error}`}\r\n\t\t\t\t\t\t</Segment>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t<AddPatientEntry onSubmit={postPatientEntry} />\r\n\r\n\t\t\t\t</Segment>\r\n\r\n\t\t\t\t<Segment>\r\n\t\t\t\t\t<Header as=\"h3\"> entries </Header>\r\n\r\n\t\t\t\t\t{currentPatient.entries?.map((entry: Entry) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Segment key={entry.id}>\r\n\t\t\t\t\t\t\t\t<Header as=\"h3\">{entry.date} <Icon name={getEntryTypeIconName(entry.type)} /></Header>\r\n\t\t\t\t\t\t\t\t<i>{entry.description}</i>  - {entry.specialist}\r\n\t\t\t\t\t\t\t\t<Divider />\r\n\t\t\t\t\t\t\t\t<Header as=\"h4\">Additional information</Header>\r\n\t\t\t\t\t\t\t\t<EntryDetails entry={entry} />\r\n\t\t\t\t\t\t\t\t<CodeList listOfCodes={entry.diagnosisCodes} />\r\n\t\t\t\t\t\t\t</Segment>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</Segment>\r\n\t\t\t</Container>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default PatientDetailsPage;","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\r\nimport { Button, Divider, Header, Container } from \"semantic-ui-react\";\r\n\r\nimport { apiBaseUrl } from \"./constants\";\r\nimport { useStateValue, setPatientList, setDiagnosisList } from \"./state\";\r\nimport { Patient, Diagnosis } from \"./types\";\r\n\r\nimport PatientListPage from \"./PatientListPage\";\r\nimport PatientDetailsPage from './PatientDetailsPage/index';\r\n\r\nconst App: React.FC = () => {\r\n  const [, dispatch] = useStateValue();\r\n  React.useEffect(() => {\r\n    axios.get<void>(`${apiBaseUrl}/ping`);\r\n\r\n    const fetchPatientList = async () => {\r\n      try {\r\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\r\n          `${apiBaseUrl}/patients`\r\n        );\r\n        dispatch(setPatientList(patientListFromApi));\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    fetchPatientList();\r\n\r\n    const fetchDiagnosisList = async () => {\r\n      try {\r\n        const { data: diagnosisListFromApi } = await axios.get<Diagnosis[]>(\r\n          `${apiBaseUrl}/diagnoses`\r\n        );\r\n        dispatch(setDiagnosisList(diagnosisListFromApi));\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    fetchDiagnosisList();\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Container>\r\n          <Header as=\"h1\">Patientor</Header>\r\n          <Button as={Link} to=\"/\" primary>\r\n            Home\r\n          </Button>\r\n          <Divider hidden />\r\n          <Switch>\r\n            <Route path=\"/:id\" render={() => <PatientDetailsPage />} />\r\n            <Route path=\"/\" render={() => <PatientListPage />} />\r\n          </Switch>\r\n        </Container>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './App';\r\nimport { reducer, StateProvider } from \"./state\";\r\n\r\nReactDOM.render(\r\n  <StateProvider reducer={reducer}>\r\n    <App />\r\n  </StateProvider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}